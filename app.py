import streamlit as st
import requests
import json
# Th√™m CSS t√πy ch·ªânh cho header, n√∫t Send v√† giao di·ªán chat
# Th√™m CSS t√πy ch·ªânh cho header, n√∫t Send, giao di·ªán chat v√† th√¥ng b√°o
st.markdown("""
<style>
.header-style {
    font-size: 24px;
    font-weight: bold;
    background-color: #f0f2f6;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
    border: 1px solid #d1d5db;
    text-align: center;
}
.send-button {
    width: 100%;
    background-color: #4CAF50;
    color: white;
    padding: 14px 20px;
    margin: 8px 0;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}
.send-button:hover {
    background-color: #45a049;
}
.chat-container {
    height: 300px;
    overflow-y: auto;
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 5px;
    background-color: white;
}
.chat-message {
    padding: 1rem;
    border-radius: 0.5rem;
    margin-bottom: 1rem;
}
.chat-message.user {
    background-color: #2b313e;
    color: black;
}
.chat-message.bot {
    background-color: #475063;
    color: black;
}
.chat-message .avatar {
    width: 20%;
}
.chat-message .avatar img {
    max-width: 78px;
    max-height: 78px;
    border-radius: 50%;
    object-fit: cover;
}
.chat-message .message {
    width: 80%;
    padding: 0 1rem;
    color: #fff;
}
.success-message {
    color: #4CAF50;
    font-weight: bold;
}
.error-message {
    color: #FF0000;
    font-weight: bold;
}
</style>
""", unsafe_allow_html=True)


st.title('üê¨ Vision - Large Language Model')

# T·∫°o 3 c·ªôt v·ªõi t·ª∑ l·ªá 10:1:10
view_1, divider, view_2 = st.columns([10, 1, 10])

with view_1:
    st.markdown('<p class="header-style">Upload Image</p>', unsafe_allow_html=True)
    uploaded_file = st.file_uploader("Ch·ªçn m·ªôt h√¨nh ·∫£nh", type=["jpg", "jpeg", "png"])
    
    if uploaded_file is not None:
        st.image(uploaded_file, caption='H√¨nh ·∫£nh ƒë√£ t·∫£i l√™n', use_column_width=True)
    send_flag = False
    if st.button('Send', key='send_button', help='G·ª≠i h√¨nh ·∫£nh', use_container_width=True):
        # X·ª≠ l√Ω khi n√∫t ƒë∆∞·ª£c nh·∫•n
        if uploaded_file is not None:
            files = {
                'file': uploaded_file
            }
            respone = requests.post("http://127.0.0.1:1712/upload", files=files)
            print(respone.text)
            mapping_label = {
                'EB1': 'B·ªánh b·∫°c l√° s·ªõm',
                'LB2': 'B·ªánh m·ªëc s∆∞∆°ng (b·ªánh s∆∞∆°ng mai)',
                'TS3': 'B·ªánh virus ƒë·ªëm h√©o c√† chua',
                'PM4': 'B·ªánh ph·∫•n tr·∫Øng',
                'SL5': 'B·ªánh l√° ƒë·ªëm',
                'BS6': 'B·ªánh ƒë·ªëm vi khu·∫©n',
                'MV7': 'B·ªánh xoƒÉn l√°',
                'YL8': 'B·ªánh kh·∫£m l√°',
                'FW9': 'B·ªánh h√©o v√†ng',
                'VW10': 'B·ªánh h√©o r·ªß',
                'GM11': 'B·ªánh N·∫•m M·ªëc X√°m',
                'HT12': 'HT12',
                'Unknown': 'Unknown'
            }
            result = json.loads(respone.text)['result']
            result = mapping_label[result]
            send_flag = True
            if respone.status_code == 200:
                st.markdown('<p class = "success-message">Send Successfully !</p>', unsafe_allow_html=True)
            else:
                st.markdown(f'<p class="error-message">C√≥ l·ªói x·∫£y ra khi g·ª≠i ·∫£nh. M√£ l·ªói: {respone.status_code}</p>', unsafe_allow_html=True)
        else:
            st.markdown('<p class="error-message">Please select a photo before submitting !</p>', unsafe_allow_html=True)

# Th√™m ƒë∆∞·ªùng k·∫ª d·ªçc v√†o c·ªôt gi·ªØa
with divider:
    st.markdown('<div style="border-left: 1px solid #ccc; height: 100vh;"></div>', unsafe_allow_html=True)

with view_2:
    st.markdown('<p class="header-style">Chatbot</p>', unsafe_allow_html=True)
    
    # T·∫°o m·ªôt container cho to√†n b·ªô giao di·ªán chat
    chat_container = st.container()
    
    # T·∫°o m·ªôt container ri√™ng cho tr∆∞·ªùng nh·∫≠p li·ªáu
    input_container = st.container()
    
    # Kh·ªüi t·∫°o l·ªãch s·ª≠ tr√≤ chuy·ªán n·∫øu ch∆∞a c√≥
    if 'messages' not in st.session_state:
        st.session_state.messages = [
             {"role": "assistant", "content": "Xin ch√†o, t√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?"}
        ]
    if send_flag == True:
        if result == 'Unknown':
             st.session_state.messages = [
                 {"role": "assistant", "content": f"ƒê√¢y kh√¥ng ph·∫£i l√† ·∫£nh l√° c√¢y. Vui l√≤ng g·ª≠i ·∫£nh l√° c√¢y ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£!"}
             ]
             send_flag = False
        else:
            st.session_state.messages = [
                {"role": "assistant", "content": f"B·ªánh m√† c√¢y ƒëang g·∫∑p ph·∫£i l√†: {result}. D∆∞·ªõi ƒë√¢y l√† c√°c th√¥ng tin v·ªÅ b·ªánh n√†y:"}
            ]
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán trong chat_container
    with chat_container:
        # chat_placeholder = st.empty()
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
            
    # ƒê·∫∑t tr∆∞·ªùng nh·∫≠p li·ªáu ·ªü cu·ªëi, trong input_container
    with input_container:
        if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...", key="user_input") or send_flag == True:
            if send_flag == True:
                prompt = f'H√£y cho bi·∫øt {result} l√† g√¨? Nguy√™n nh√¢n g√¢y ra {result} l√† g√¨? C√°ch ph√≤ng tr√°nh v√† ch·ªØa {result} tr√™n c√¢y l√† g√¨? H√£y tr·∫£ l·ªùi c√¢u h·ªèi tr√™n kh√¥ng c√≥ k√≠ t·ª± ƒë·∫∑c bi·ªát'
                send_flag = False
            else:
                st.session_state.messages.append({"role": "user", "content": prompt})
                with chat_container:
                    with st.chat_message("user"):
                        st.markdown(prompt)
            prompt_json = {
                "message" : prompt
            }
            response1= requests.post("http://127.0.0.1:1712/chatbot",json = prompt_json)
            
            st.session_state.messages.append({"role": "assistant", "content": response1.text})
            with chat_container:
                with st.chat_message("assistant"):
                    st.markdown(response1.text)
    # chat_content = ""
    # for message in st.session_state.messages:
    #     role_class = "bot" if message["role"] == "assistant" else "user"
    #     chat_content += f'<div class="chat-message {role_class}">{message["content"]}</div>'
    
    # # C·∫≠p nh·∫≠t placeholder v·ªõi n·ªôi dung chat m·ªõi
    # chat_placeholder.markdown(f'<div class="chat-container">{chat_content}</div>', unsafe_allow_html=True)
    # T·ª± ƒë·ªông cu·ªôn xu·ªëng cu·ªëi c√πng c·ªßa chat_container
    st.markdown('<script>window.scrollTo(0,document.body.scrollHeight);</script>', unsafe_allow_html=True)